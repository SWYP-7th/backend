name: FitIsland CI/CD

on:
  push:
    branches:
      - main 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v4
       
      # JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
      
      # 1. 먼저 Gradle 설치
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582
        
      # 2. 그 다음 Wrapper 생성
      - name: Generate Gradle Wrapper
        run: gradle wrapper
        
      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build

      # 빌드 결과 확인
      - name: Check build output
        run: ls -al build/libs

      # JAR 파일을 Docker 컨텍스트로 이동
      - name: Move JAR to Docker context
        run: mv build/libs/*SNAPSHOT.jar ./app.jar

      # Docker 컨텍스트에서 JAR 파일 확인
      - name: Verify JAR file in context
        run: ls -al
        

  push_to_registry:
    name: Push to NCP Container Registry
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}
      - name: Build and Push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.NCP_CONTAINER_REGISTRY }}/fitisland:latest
  
  pull_from_registry:
    name: Connect server ssh and pull from container registry
    needs: push_to_registry
    runs-on: ubuntu-latest
    steps:
      - name: Connect via SSH and Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          username: ${{ secrets.DEV_USERNAME }}
          password: ${{ secrets.DEV_PASSWORD }}
          port: ${{ secrets.DEV_PORT }}
          script: |
            docker pull ${{ secrets.NCP_CONTAINER_REGISTRY }}/fitisland
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)
            docker run -d -p 8080:8080 ${{ secrets.NCP_CONTAINER_REGISTRY }}/fitisland
            docker image prune -f
