# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a package using Gradle and then publish it to GitHub packages when a release is created
# For more information see: https://github.com/actions/setup-java/blob/main/docs/advanced-usage.md#Publishing-using-gradle
# 프로젝트명을 사용
name: FitIsland CI/CD 
#push 기반 트리거:
#지속적인 통합/배포(CI/CD)에 적합
#더 빈번한 업데이트가 필요한 경우
#개발 과정에서 더 즉각적인 피드백을 원할 때
#main 브랜치로 push 될 때, workflow가 실행된다
on:
  push:
    branches:
      - main 
      
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 코드 체크아웃
      - uses: actions/checkout@v3
       
      # JDK 21 설정
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
      
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      # Gradle 빌드
      - name: Build with Gradle
        run: ./gradlew build
        
  deploy:
    needs: build  # build job이 성공한 후 실행
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Docker Buildx 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      # NCP 컨테이너 레지스트리 로그인
      - name: Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}
      
      # Docker Compose로 빌드 및 푸시
      - name: Build and Push with Docker Compose
        run: |
          docker compose build
          docker compose push
      
      # 서버 배포
      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEV_HOST }}
          username: ${{ secrets.DEV_USERNAME }}
          password: ${{ secrets.DEV_PASSWORD }}
          port: ${{ secrets.DEV_PORT }}
          script: |
            cd /home/ubuntu/workspace/backend
            docker compose pull
            docker compose down
            docker compose up -d
            docker image prune -f  # 사용하지 않는 이미지 삭제 (-f는 확인 없이 바로 삭제)
